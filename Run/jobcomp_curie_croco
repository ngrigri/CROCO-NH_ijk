#!/bin/bash
#############################################
#    COMPILATION JOB CURIE - CROCO  MPI     #
#############################################

# module unload intel
# module load intel/16.0.2.181 bullxmpi netcdf/4.2

echo $PATH

#
# set source, compilation and run directories
#
SOURCE=../Roms_Agrif
SCRDIR=/ccc/work/cont003/gen9178/griman/CROCO-NH/Compile
RUNDIR=`pwd`
#
# determine operating system
#
OS=`uname`
echo "OPERATING SYSTEM IS: $OS"

#
# compiler options
# CURIE

#module load intel/16.0.2.181
LINUX_FC=mpif90
MPIF90=$LINUX_FC
echo $LINUX_FC
echo $MPIF90
#module load bullxmpi
BITS=SIXTYFOUR
#module load netcdf/4.2
NETCDFLIB='-L${NETCDF_ROOT}/lib -lnetcdf -lnetcdff'
echo $NETCDFLIB
NETCDFINC=-I${NETCDF_ROOT}/include
echo $NETCDFINC
MPILIB=""
MPIINC=""
#
# END OF USER'S MODIFICATIONS
####################################################
#
# Use GNU Make command
#
MAKE=make
#
# clean scratch area
#
rm -rf $SCRDIR
mkdir $SCRDIR
#
# AGRIF sources directory
#
AGRIF_SRC=${SOURCE}/AGRIF
#
# copy SOURCE code
#
/bin/cp -f ${SOURCE}/*.F90 $SCRDIR
/bin/cp -f ${SOURCE}/*.h90 $SCRDIR
/bin/cp -f ${SOURCE}/*.F   $SCRDIR
/bin/cp -f ${SOURCE}/*.h   $SCRDIR
/bin/cp -f ${SOURCE}/Make* $SCRDIR
/bin/cp -f ${SOURCE}/testkeys.F $SCRDIR
/bin/cp -f ${SOURCE}/jobcomp $SCRDIR
/bin/cp -f ${SOURCE}/amr.in $SCRDIR
/bin/cp -RLf ${AGRIF_SRC} $SCRDIR
/bin/cp -f ${SOURCE}/XIOS/*.F $SCRDIR
/bin/cp -f ${SOURCE}/PISCES/* $SCRDIR
/bin/cp -f ${SOURCE}/PISCES/kRGB61* $RUNDIR
/bin/cp -f ${SOURCE}/NHMG/* $SCRDIR
if [[ -e "namelist_pisces" ]] ; then
	echo "  file namelist_pisces exists in Run directory"
else
	/bin/cp -f ${SOURCE}/PISCES/namelist_pisces* $RUNDIR
	echo "  file namelist_pisces copied from source directory"
fi

if [[ -e "nh_namelist" ]] ; then
	echo "  file nh_namelist exists in Run directory"
else
	/bin/cp -f ${SOURCE}/NHMG/nh_namelist $RUNDIR
	echo "  file nh_namelist copied from source directory"
fi

#
# overwrite with local files
#
/bin/cp -f *.F90 $SCRDIR
/bin/cp -f *.h90 $SCRDIR
/bin/cp -f *.F $SCRDIR
/bin/cp -f *.h $SCRDIR
/bin/cp -f Make* $SCRDIR
/bin/cp -f jobcomp $SCRDIR

#
# Change directory
#
cd $SCRDIR
#
# generates LDFLAGS1 according to users notifications
#
LDFLAGS1="$NETCDFLIB"
CPPFLAGS1="$NETCDFINC"
#
# Set compilation options
#
		CPP1="cpp -traditional -DLinux -DIfort"
		echo $CPP1
		CFT1="$LINUX_FC"
		echo $CFT1
		FFLAGS1="-g -O3 -shared-intel -shared-libgcc -mcmodel=large -fno-alias -i4 -r8 -fp-model precise  $NETCDFINC"
		echo $FFLAGS1
        FFLAGSNH="-g -O3 -shared-intel -shared-libgcc -mcmodel=large -fno-alias -i4 -r8 -fp-model precise $NETCDFINC"
        echo $FFLAGSNH
		LDFLAGS1="$LDFLAGS1"
		echo $LDFLAGS1
#
# determine if AGRIF compilation is required
#
unset COMPILEAGRIF
echo "Checking COMPILEAGRIF..."
if $($CPP1 testkeys.F | grep -i -q agrifisdefined) ; then
	echo " => AGRIF activated"
	COMPILEAGRIF=TRUE
	FFLAGS1="$FFLAGS1 -IAGRIF"
	LDFLAGS1="-LAGRIF -lagrif $LDFLAGS1"
# we use the AGRIF Makedefs.generic definition
	/bin/cp -f Makedefs.generic.AGRIF Makedefs.generic
fi

#
# determine if MPI compilation is required
#
unset COMPILEMPI
echo "Checking COMPILEMPI..."
if $($CPP1 testkeys.F | grep -i -q mpiisdefined) ; then
	echo " => MPI activated"
	COMPILEMPI=TRUE
	LDFLAGS1="$LDFLAGS1 $MPILIB"
	CPPFLAGS1="$CPPFLAGS1 $MPIINC"
	FFLAGS1="$FFLAGS1 $MPIINC"
	CFT1="$MPIF90"
fi
#
# rewrite Makedefs according to previous flags
# with MPI flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# clean scratch
#
$MAKE clobber

#
# compile the precompiling program
#
$MAKE mpc

#
# prepare and compile the library
#
if [[ $COMPILEAGRIF ]] ; then
#
# compile the AGRIF librairy
#
	if [[ $COMPILEMPI ]] ; then
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" CPPFLAGS="-DAGRIF_MPI $MPIINC" FFLAGS="$FFLAGS1"
	else
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" FFLAGS="$FFLAGS1"
	fi
	if [[ $OS == Darwin ]] ; then          # DARWIN
# run RANLIB on Darwin system
		ranlib AGRIF/libagrif.a
	fi
#
	$CPP1 amr.in | grep -v -e ! -e '#' -e % -e '*' > amr.scrum
	mkdir ROMSFILES
	mv AGRIF/conv ROMSFILES/.
	mv amr.scrum ROMSFILES/.
	cd ROMSFILES
	mkdir AGRIF_MODELFILES
	mkdir AGRIF_INC
	cd ..
	INCLUDELIST="param.h averages.h climat.h forces.h lmd_kpp.h mixing.h ocean2d.h ocean3d.h \
		work.h private_scratch_AMR.h scalars.h ncscrum.h coupling.h grid.h tides.h \
		sediment.h bbl.h zoom.h floats.h sources.h buffer.h diagnostics.h common.h \
		common.passivetrc.pisces.h parameter.passivetrc.h trcctl.pisces.h trclsm.pisces.h \
		common.passivetrc.h parameter.h parameter.passivetrc.pisces.h trcini.pisces.h"

	for i in $INCLUDELIST ; do
		echo $i
		cat cppdefs.h $i | cpp -P | grep -v -e ! -e '#' -e % -e '*' > ROMSFILES/$i
	done
	mv -f ROMSFILES/private_scratch_AMR.h ROMSFILES/private_scratch.h
fi

#
# determine if OPENMP compilation is needed
#
unset COMPILEOMP
if $($CPP1 testkeys.F | grep -i -q openmp) ; then
	COMPILEOMP=TRUE
	if [[ $OS == Linux ]] ; then
		if [[ $LINUX_FC == gfortran ]] ; then
			FFLAGS1="$FFLAGS1 -fopenmp"
		elif [[ $LINUX_FC == ifort || $LINUX_FC == ifc ]] ; then
			FFLAGS1="$FFLAGS1 -openmp"
		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == Darwin ]] ; then 
		if [[ $DARWIN_FC == gfortran ]] ; then 
			FFLAGS1="$FFLAGS1 -fopenmp"
    		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == AIX ]] ; then
		FFLAGS1="$FFLAGS1 -qsmp=omp"
		CFT1="xlf95_r"
	elif [[ $OS == OSF1   ]] ; then
		FFLAGS1="$FFLAGS1 -omp"
	elif [[ $OS == IRIX64 ]] ; then
		FFLAGS1="$FFLAGS1 -mp"
	elif [[ $OS == SunOS  ]] ; then 
		FFLAGS1="$FFLAGS1 -openmp"
	fi
fi

#
# rewrite Makedefs according to previous flags
# with openmp flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(FFLAGSNH)?'$FFLAGSNH'?g' >> flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# compile roms
#
$MAKE mpc
$MAKE 
mv roms $RUNDIR
#

##NG: Begin
#
# compile roms tools
#
#$MAKE tools
#mv partit $RUNDIR
#mv ncjoin $RUNDIR
#mv cross_matrix $RUNDIR
#mv ncrename $RUNDIR
#
##NG: End

